/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package recipetherapy;


import java.sql.ResultSet;
import java.util.*;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.sql.Blob;
import javax.swing.ImageIcon;
import java.time.LocalDateTime;    
import java.time.format.DateTimeFormatter;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.awt.Image;
import javax.imageio.ImageIO;
import javax.swing.Icon;



public class RecipeView extends javax.swing.JFrame {

    
    myDBCon dbCon;
    ResultSet rs;
    int recipe_id;
    int user_id;
    
    public RecipeView(int recipe_id, int user_id) {
        
        initComponents();
        this.setLocationRelativeTo(null);        
        dbCon = new myDBCon();
        this.user_id = user_id;
        this.recipe_id = recipe_id;
        setRecipe(recipe_id);
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        recipenameLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        chefLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        caloriesLabel = new javax.swing.JLabel();
        proteinLabel = new javax.swing.JLabel();
        carbsLabel = new javax.swing.JLabel();
        FatsLabel = new javax.swing.JLabel();
        cooktimeLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        instructionsText = new javax.swing.JTextArea();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ingredientsLabel = new javax.swing.JTextArea();
        cooktimeLabel1 = new javax.swing.JLabel();
        ingredientLabel = new javax.swing.JLabel();
        cooktimeLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reviewTextArea = new javax.swing.JTextArea();
        addreviewBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        reviewText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(222, 232, 250));

        recipenameLabel.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        recipenameLabel.setForeground(new java.awt.Color(0, 0, 51));
        recipenameLabel.setText("Recipe Name");

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recipetherapy/image_1.jpg"))); // NOI18N

        chefLabel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        chefLabel.setForeground(new java.awt.Color(0, 0, 0));
        chefLabel.setText("Chef: ");

        countryLabel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        countryLabel.setForeground(new java.awt.Color(0, 0, 0));
        countryLabel.setText("Country: ");

        caloriesLabel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        caloriesLabel.setForeground(new java.awt.Color(0, 0, 0));
        caloriesLabel.setText("Calories: ");

        proteinLabel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        proteinLabel.setForeground(new java.awt.Color(0, 0, 0));
        proteinLabel.setText("Protein: ");

        carbsLabel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        carbsLabel.setForeground(new java.awt.Color(0, 0, 0));
        carbsLabel.setText("Carbohydrates: ");

        FatsLabel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        FatsLabel.setForeground(new java.awt.Color(0, 0, 0));
        FatsLabel.setText("Fats: ");

        cooktimeLabel.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        cooktimeLabel.setForeground(new java.awt.Color(0, 0, 0));
        cooktimeLabel.setText("Reviews");

        jScrollPane1.setBorder(null);

        instructionsText.setEditable(false);
        instructionsText.setBackground(new java.awt.Color(222, 232, 250));
        instructionsText.setColumns(20);
        instructionsText.setFont(new java.awt.Font("Serif", 0, 16)); // NOI18N
        instructionsText.setForeground(new java.awt.Color(0, 0, 0));
        instructionsText.setRows(5);
        instructionsText.setText("Step 1: Prepare the Meat\n\nIn a large pot, heat the ghee and vegetable oil over medium heat.\nAdd the lamb chunks and cook until browned on all sides.\nAdd enough water to cover the meat, bring to a boil, then reduce the heat to low and let it simmer for about 1.5 to 2 hours, or until the meat is tender.\nStep 2: Make the Mansaf Sauce\n\nIn a separate bowl, whisk the yogurt until smooth.\nSlowly pour the yogurt into the pot with the cooked lamb, stirring continuously.\nAdd ground cumin, coriander, cardamom, and salt to taste.\nSimmer the meat and yogurt mixture together on low heat for about 15-20 minutes, stirring occasionally. Make sure not to let it boil.\nStep 3: Prepare the Rice\n\nRinse the rice under cold water until the water runs clear.\nIn a separate pot, bring water to a boil and add salt.\nAdd the rinsed rice to the boiling water and cook until it is tender but still firm (follow the cooking instructions on the rice package for the appropriate cooking time).\nStep 4: Assemble and Serve\n\nSpread the cooked rice on a large serving platter or tray.\nArrange the cooked lamb on top of the rice.\nPour some of the Mansaf sauce over the meat and rice.\nGarnish with toasted almonds (if desired) and chopped parsley or cilantro.\nServe Mansaf hot with shrak or flatbread on the side.");
        jScrollPane1.setViewportView(instructionsText);

        jCheckBox1.setBackground(new java.awt.Color(222, 232, 250));
        jCheckBox1.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(0, 0, 0));
        jCheckBox1.setText("Favorite");
        jCheckBox1.setBorder(null);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recipetherapy/star_icon.png"))); // NOI18N

        jScrollPane3.setBackground(new java.awt.Color(222, 232, 250));
        jScrollPane3.setBorder(null);
        jScrollPane3.setForeground(new java.awt.Color(204, 255, 255));

        ingredientsLabel.setEditable(false);
        ingredientsLabel.setBackground(new java.awt.Color(222, 232, 250));
        ingredientsLabel.setColumns(20);
        ingredientsLabel.setFont(new java.awt.Font("Serif", 0, 16)); // NOI18N
        ingredientsLabel.setForeground(new java.awt.Color(0, 0, 0));
        ingredientsLabel.setRows(5);
        ingredientsLabel.setText("100 Grams of Meat\n2 Large Onions");
        jScrollPane3.setViewportView(ingredientsLabel);

        cooktimeLabel1.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        cooktimeLabel1.setForeground(new java.awt.Color(0, 0, 0));
        cooktimeLabel1.setText("Cook Time: ");

        ingredientLabel.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        ingredientLabel.setForeground(new java.awt.Color(0, 0, 0));
        ingredientLabel.setText("Ingredients");

        cooktimeLabel2.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        cooktimeLabel2.setForeground(new java.awt.Color(0, 0, 0));
        cooktimeLabel2.setText("Instructions");

        reviewTextArea.setColumns(20);
        reviewTextArea.setRows(5);
        jScrollPane2.setViewportView(reviewTextArea);

        addreviewBtn.setText("Add Review");
        addreviewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addreviewBtnActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));

        jLabel1.setFont(new java.awt.Font("Serif", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Rating");

        jScrollPane4.setBorder(null);

        reviewText.setEditable(false);
        reviewText.setBackground(new java.awt.Color(222, 232, 250));
        reviewText.setColumns(20);
        reviewText.setFont(new java.awt.Font("Serif", 0, 16)); // NOI18N
        reviewText.setForeground(new java.awt.Color(0, 0, 0));
        reviewText.setRows(5);
        reviewText.setText("lol\n");
        jScrollPane4.setViewportView(reviewText);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cooktimeLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(recipenameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cooktimeLabel1)
                                    .addComponent(FatsLabel)
                                    .addComponent(carbsLabel)
                                    .addComponent(proteinLabel)
                                    .addComponent(caloriesLabel)
                                    .addComponent(chefLabel)
                                    .addComponent(countryLabel)
                                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cooktimeLabel)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(addreviewBtn)
                                                .addGap(159, 159, 159)))
                                        .addGap(9, 9, 9))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(ingredientLabel)
                                        .addGap(639, 639, 639)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addGap(26, 26, 26))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jCheckBox1)
                    .addComponent(recipenameLabel))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ingredientLabel)
                            .addComponent(cooktimeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(addreviewBtn))
                        .addGap(3, 3, 3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cooktimeLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chefLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(caloriesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(proteinLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(carbsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FatsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(cooktimeLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        try{        
            if(jCheckBox1.isSelected()){ // add to favorite when selected
                String query = "insert into user_fav_recipe (user_id,recipe_id) values ("+ user_id + "," + recipe_id +")";
                dbCon.executeStatement(query);                            
                }

            else{ // delete from favorite when selected
                dbCon.executeStatement("delete from user_fav_recipe where user_id = "+ user_id + " and recipe_id = "+ recipe_id);
            }
        }
       catch(SQLException e){
            javax.swing.JLabel label = new javax.swing.JLabel("SQL ErroR." + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
}

    }                                          

    private void addreviewBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        String review = reviewTextArea.getText();
        if (!review.isBlank()){
            int rating = Integer.parseInt(jComboBox1.getSelectedItem().toString());
            LocalDateTime now = LocalDateTime.now();  
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MMM/yyyy");  


            String query = "insert into recipe_rates (review, rating, review_date, recipe_id, user_id) values"
                    + "( '" + review + "', " + rating + ", '" + dtf.format(now) + "', " + recipe_id + ", " + user_id + ")";
            try{
            dbCon.executeStatement(query);
            }
           catch(SQLException e){
                javax.swing.JLabel label = new javax.swing.JLabel("SQL ErroR." + e.getMessage());
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);            
            }
            setRecipe(recipe_id);
        }
        else{
            javax.swing.JLabel label = new javax.swing.JLabel("Review Field is empty. Enter a review.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);   
        }
    }                                            


    void setRecipe(int id){
        
        try{
        
        //check if recipe is in favorites to set the fav checkbox value
        rs = dbCon.executeStatement("select * from user_fav_recipe where user_id = " + user_id + " and recipe_id = "+ recipe_id);
        if (rs.next())
            jCheckBox1.setSelected(true);
        else
             jCheckBox1.setSelected(false);

        
        String query = "select R.*, C.country_name cname, U.name name from recipe R, \"User\" U, country C "
                + "where R.id = " + id
                + " and R.user_id = U.id"
                + " and R.country_id = C.id";
       
        //set recipe values in their appropriate fields
        rs = dbCon.executeStatement(query);
        if (rs.next()){
          cooktimeLabel1.setText("Cook time: "+ String.valueOf(rs.getInt("cook_time")) + " minutes");
          chefLabel.setText("Chef: " + rs.getString("name"));
          countryLabel.setText("Country: " + rs.getString("cname"));
          recipenameLabel.setText(rs.getString("recipe_name"));
          caloriesLabel.setText("Calories: "+ String.valueOf(rs.getInt("calories")));
          FatsLabel.setText("Fats: "+ String.valueOf(rs.getInt("fats")));
          proteinLabel.setText("Protein: "+ String.valueOf(rs.getInt("protein")));
          carbsLabel.setText("Carbohydrates: "+ String.valueOf(rs.getInt("carbs")));
          instructionsText.setText(rs.getString("instruction"));
                    
          Blob b = rs.getBlob("image");                  
          //setting image if exists 
          try{
          if (b != null){
            byte[] imageData = b.getBytes(1,(int)b.length());
            InputStream inputStream = new ByteArrayInputStream(imageData);
            Image image = ImageIO.read(inputStream);
            Icon icon = new ImageIcon(image.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(),4));
            imageLabel.setIcon(icon);
          }
          }
          catch(Exception e){
            javax.swing.JLabel label = new javax.swing.JLabel("Error setting image");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
          }
          
            getIngredients();
            getReviews();
          
        }
        }
        catch(SQLException e){
            javax.swing.JLabel label = new javax.swing.JLabel("SQL ErroR." + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
            
    }
    void getReviews(){
        String reviews = "";
        String query = "Select RR.review, RR.review_date, RR.rating, U.name chef "
                + "from recipe_rates RR, recipe R, \"User\" U "
                + "where U.id = RR.user_id "
                + "and R.id = RR.recipe_id "
                + "and RR.recipe_id = " + recipe_id;
        
        try{
        rs = dbCon.executeStatement(query);
        
        while(rs.next()){
            reviews += rs.getString("chef") + "  -  " + rs.getDate("review_date").toString() + "  -  Rating: "
                    + rs.getInt("rating") + "\n" + rs.getString("review") + "\n______________\n";
            
        }
        reviewText.setText(reviews);
        }
         catch(SQLException e){
            javax.swing.JLabel label = new javax.swing.JLabel("SQL ErroR." + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }
    void getIngredients(){
        //getting ingredients for the recipe
        String ingredients = "";
        String query = 
                "Select R.quantity quantity, I.ingredient_name name, I.unit_of_measure UOM from recipe_ingredient R, ingredient I "
                + "where recipe_id = " + recipe_id
                + " and R.ingredient_id = I.id";
        
        try{
        rs = dbCon.executeStatement(query); 
        while(rs.next()){
            
            ingredients += rs.getFloat("quantity") 
                    + " " + rs.getString("UOM") + " of " 
                    + rs.getString("name") + "\n";
        }
        }
        catch(SQLException e){
           javax.swing.JLabel label = new javax.swing.JLabel("SQL ErroR." + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE); 
        }
        
        
        ingredientsLabel.setText(ingredients);
        
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel FatsLabel;
    private javax.swing.JButton addreviewBtn;
    private javax.swing.JLabel caloriesLabel;
    private javax.swing.JLabel carbsLabel;
    private javax.swing.JLabel chefLabel;
    private javax.swing.JLabel cooktimeLabel;
    private javax.swing.JLabel cooktimeLabel1;
    private javax.swing.JLabel cooktimeLabel2;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel ingredientLabel;
    private javax.swing.JTextArea ingredientsLabel;
    private javax.swing.JTextArea instructionsText;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel proteinLabel;
    private javax.swing.JLabel recipenameLabel;
    private javax.swing.JTextArea reviewText;
    private javax.swing.JTextArea reviewTextArea;
    // End of variables declaration                   
}
